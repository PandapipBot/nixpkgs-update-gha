# SPDX-License-Identifier: WTFPL
name: nixpkgs-update GitHub Action

# Needed by detsys nix installer and magic nix cache
permissions:
  contents: read
  id-token: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'

env:
  # Don't touch these unless you know what you're doing
  CACHE_KEY: nixpkgs-cache-v1
  NIXPKGS_LOCATION: /home/runner/.cache/nixpkgs
  ORIGIN_LOCATION: nixpkgs-review-gha
  UPSTREAM_NIXPKGS_REPO_URL: https://github.com/NixOS/nixpkgs.git

  # Set this to e.g. "SomeOtherRepo/nixpkgs" if you're using a different repository name other than <login>/nixpkgs
  NIXPKGS_REPO_URL: ""

  # If you want, you can enable Determinate Systems' telemetry here
  ENABLE_DETSYS_TELEM: false

jobs:
  update-package:
    name: Run nixpkgs-update for ${{ matrix.package }}
    runs-on: ubuntu-latest
    needs:
      - get-github-info
      - prepare-nixpkgs-cache
    if: needs.get-github-info.outputs.origin_is_template == 'false'
    strategy:
      fail-fast: false
      matrix:
        package:
          - python3Packages.optree
          - python3Packages.kaleido
          - python3Packages.kneaddata

    steps:
      - if: ${{ !matrix.package }}
        run: |
          echo "::error title=No Repositories Configured::No repositories have been added to nixpkgs-update.yml. Please follow the directions in the README file at the root of this repository." 1>&2
          exit 1

      - name: Restore nixpkgs cache
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ${{ env.NIXPKGS_LOCATION }}
          key: ${{ env.CACHE_KEY }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.CACHE_KEY }}
      
      - name: Checkout nixpkgs-review-gha
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          path: ${{ env.ORIGIN_LOCATION }}
          token: ${{ secrets.GH_PAT }}

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@786fff0690178f1234e4e1fe9b536e94f5433196 # v20
        with:
          diagnostic-endpoint: ${{ env.ENABLE_DETSYS_TELEM && 'https://install.determinate.systems/nix-installer/diagnostic' || '' }}

      - name: Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@565684385bcd71bad329742eefe8d12f2e765b39 # v13
        with:
          diagnostic-endpoint: ${{ env.ENABLE_DETSYS_TELEM && 'https://install.determinate.systems/magic-nix-cache/perf' || '' }}
          use-flakehub: false

      - name: Get Package Data
        id: pkgdata
        shell: bash
        run: |
          set -euxo pipefail

          NIXPKGS_LOCATION="$(echo "$NIXPKGS_LOCATION" | envsubst)"

          UPDATE_NIX_OLD_VERSION="$(nix eval --impure --expr "with import $NIXPKGS_LOCATION {}; lib.getVersion $PACKAGE" | tr -d '"')"

          # Most update scripts expect to be in the nixpkgs root
          pushd "$NIXPKGS_LOCATION"
          # TODO: This requires a bunch of stuff from master to be in the binary cache
          # TODO: Use nix develop --file instead of nix-shell
          nix-shell "$NIXPKGS_LOCATION/maintainers/scripts/update.nix" --argstr path "$PACKAGE" --argstr skip-prompt true --argstr commit false
          if [ $? -ne 0 ]; then
            echo "::error title=Failed to update packages!::The update script did not report a successful package update, please check the full logs for more details."
            exit 1
          fi
          popd

          UPDATE_NIX_NEW_VERSION="$(nix eval --impure --expr "with import $NIXPKGS_LOCATION {}; lib.getVersion $PACKAGE" | tr -d '"')"

          {
            echo "old_version=$UPDATE_NIX_OLD_VERSION"
            echo "new_version=$UPDATE_NIX_NEW_VERSION"
          } >> "$GITHUB_OUTPUT"
        env:
          PACKAGE: ${{ matrix.package }}

      - name: nixpkgs-update
        shell: bash
        if: steps.pkgdata.outputs.old_version != steps.pkgdata.outputs.new_version
        run: |
          set -euxo pipefail

          NIXPKGS_LOCATION="$(echo "$NIXPKGS_LOCATION" | envsubst)"

          pushd "$NIXPKGS_LOCATION"
          nix develop "${GITHUB_WORKSPACE%/}/${ORIGIN_LOCATION#/}#nixpkgs-update-gha" --command bash -c "nixpkgs-update update \
            --pr \
            --cve \
            --nixpkgs-review \
            \"${{ matrix.package }} ${{ steps.pkgdata.outputs.old_version }} ${{ steps.pkgdata.outputs.new_version }}\""
          popd
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  get-github-info:
    name: Fetch basic info
    runs-on: ubuntu-latest
    outputs:
      user_login: ${{ steps.extract.outputs.user_login }}
      user_name: ${{ steps.extract.outputs.user_name }}
      user_email: ${{ steps.extract.outputs.user_email }}

      nixpkgs_repo_url: ${{ steps.extract.outputs.nixpkgs_repo_url }}

      origin_branch: ${{ steps.extract.outputs.origin_branch }}
      origin_is_template: ${{ steps.extract.outputs.origin_is_template }}
      template_url: ${{ steps.extract.outputs.template_url }}
      template_branch: ${{ steps.extract.outputs.template_branch }}
      template_full_name: ${{ steps.extract.outputs.template_full_name }}
    steps:
      - name: Get information from GitHub API
        id: extract
        shell: bash
        run: |
          set -euxo pipefail

          # Use GITHUB_ACTIONS_TOKEN to bypass rate limit, since it's guaranteed to exist and have read access to the repository
          ORIGIN_REPO_INFO="$(curl -s -H "Authorization: token $GITHUB_ACTIONS_TOKEN" "https://api.github.com/repos/$REPO_STUB")"

          ORIGIN_DEFAULT_BRANCH="$(echo "$ORIGIN_REPO_INFO" | jq -r '.default_branch')"
          TEMPLATE_URL=$(echo "$ORIGIN_REPO_INFO" | jq -r '.template_repository.clone_url // empty')

          if [ -z "$TEMPLATE_URL" ]; then
            IS_TEMPLATE_REPO="true"
            TEMPLATE_DEFAULT_BRANCH="_"
            TEMPLATE_FULL_NAME="_"
            LOGIN="_"
            NAME="_"
            EMAIL="_"
            NIXPKGS_REPO_URL="_"
          else
            IS_TEMPLATE_REPO="false"
            TEMPLATE_DEFAULT_BRANCH="$(echo "$ORIGIN_REPO_INFO" | jq -r '.template_repository.default_branch')"
            TEMPLATE_FULL_NAME="$(echo "$ORIGIN_REPO_INFO" | jq -r '.template_repository.full_name')"

            if [ -z "${GITHUB_TOKEN:-}" ]; then
              echo "::error title=No PAT Configured::A PAT has not been added to this repository's secrets. Please follow the directions in the README file at the root of this repository." 1>&2
              exit 1
            fi

            USER_INFO="$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user)"
            EMAIL_INFO="$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user/emails)"

            LOGIN="${LOGIN:-$(echo "$USER_INFO" | jq -r .login)}"
            NAME="${NAME:-$(echo "$USER_INFO" | jq -r .name)}"
            if echo "$EMAIL_INFO" | jq -e 'type == "array"' > /dev/null; then
              EMAIL=$(echo "$EMAIL_INFO" | jq -r '.[] | select(.primary and .verified) | .email // empty')
            else
              echo "::warning title=Failed to fetch email addresses::Failed to fetch email addresses belonging to the given PAT (did you make sure to include the email scope?)"
              echo "$EMAIL_INFO"
              EMAIL=""
            fi
            EMAIL="${EMAIL:-"${LOGIN}@users.noreply.github.com"}"
            NIXPKGS_REPO_URL="${NIXPKGS_REPO_URL:-"https://github.com/$LOGIN/nixpkgs.git"}"
          fi

          {
            echo "user_login=$LOGIN"
            echo "user_name=$NAME"
            echo "user_email=$EMAIL"
            echo "nixpkgs_repo_url=$NIXPKGS_REPO_URL"
            echo "origin_branch=$ORIGIN_DEFAULT_BRANCH"
            echo "origin_is_template=$IS_TEMPLATE_REPO"
            echo "template_url=$TEMPLATE_URL"
            echo "template_branch=$TEMPLATE_DEFAULT_BRANCH"
            echo "template_full_name=$TEMPLATE_FULL_NAME"
          } >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_ACTIONS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_STUB: ${{ github.repository }}

  prepare-nixpkgs-cache:
    name: Fetch latest nixpkgs
    runs-on: ubuntu-latest
    needs:
      - get-github-info
    if: needs.get-github-info.outputs.origin_is_template == 'false'
    steps:
      - name: Restore nixpkgs cache
        id: cache
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ${{ env.NIXPKGS_LOCATION }}
          key: ${{ env.CACHE_KEY }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.CACHE_KEY }}

      - name: Update nixpkgs
        shell: bash
        run: |
          set -euxo pipefail

          NIXPKGS_LOCATION="$(echo "$NIXPKGS_LOCATION" | envsubst)"

          NIXPKGS_FIRST_RUN=0
          if [ ! -d "$NIXPKGS_LOCATION" ]; then
            echo "::warning title=First Run::This is the first time this workflow is being run. Since the size of nixpkgs is over the cache limit, it will need to be compressed. This will take a long time."
            NIXPKGS_FIRST_RUN=1
          fi

          # On first run, get ourselves a clone of nixpkgs (duh)
          if [ "$NIXPKGS_FIRST_RUN" = "1" ]; then
            mkdir -p "$(dirname "$NIXPKGS_LOCATION")"
            git clone "$NIXPKGS_REPO_URL" "$NIXPKGS_LOCATION" --filter=blob:none
            git -C "$NIXPKGS_LOCATION" remote add upstream "$UPSTREAM_NIXPKGS_REPO_URL" || git -C "$NIXPKGS_LOCATION" remote set-url upstream "$UPSTREAM_NIXPKGS_REPO_URL"
          fi

          # We always want it to be up-to-date with upstream/master
          git -C "$NIXPKGS_LOCATION" fetch upstream --filter=blob:none
          git -C "$NIXPKGS_LOCATION" reset --hard upstream/master

          if [ "$NIXPKGS_FIRST_RUN" = "1" ]; then
            # On the first run we can afford to be more aggressive with optimizing
            git -C "$NIXPKGS_LOCATION" gc --aggressive
          else
            # Like git gc --aggressive but reuses some existing data at the cost of an insignificant amount of space
            git -C "$NIXPKGS_LOCATION" repack -ad --depth=50 --window=100 --window-memory=8g
            git -C "$NIXPKGS_LOCATION" reflog expire --expire=now --all
            git -C "$NIXPKGS_LOCATION" prune --expire=now
          fi

          # Calculate the commit graph to speed up future git operations
          git -C "$NIXPKGS_LOCATION" commit-graph write --reachable --changed-paths --split
        env:
          NIXPKGS_REPO_URL: ${{ needs.get-github-info.outputs.nixpkgs_repo_url }}

      - name: Save nixpkgs cache
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ${{ env.NIXPKGS_LOCATION }}
          key: ${{ env.CACHE_KEY }}-${{ github.run_id }}

  rebase-on-template:
    runs-on: ubuntu-latest
    needs:
      - get-github-info
    if: needs.get-github-info.outputs.origin_is_template == 'false'
    steps:
      - name: Checkout origin repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ needs.get-github-info.outputs.origin_branch }}
          fetch-depth: 0  # Needed for rebase
          path: ${{ env.ORIGIN_LOCATION }}
          token: ${{ secrets.GH_PAT }}

      - name: Rebase on template repo
        shell: bash
        run: |
          set -euxo pipefail

          git config --global advice.defaultBranchName false
          git config --global advice.detachedHead false
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"

          pushd "${GITHUB_WORKSPACE%/}/${ORIGIN_LOCATION#/}"

          git remote add template "$TEMPLATE_URL" || git remote set-url template "$TEMPLATE_URL"
          git fetch template

          if [ "$(git merge-base "origin/$ORIGIN_BRANCH" "template/$TEMPLATE_BRANCH")" != "$(git rev-parse "template/$TEMPLATE_BRANCH")" ]; then
            git checkout "origin/$ORIGIN_BRANCH"
            git rebase "template/$TEMPLATE_BRANCH"
            git push --force origin "HEAD:$ORIGIN_BRANCH"
          fi
        env:
          USER_NAME: ${{ needs.get-github-info.outputs.user_name }}
          USER_EMAIL: ${{ needs.get-github-info.outputs.user_email }}
          USER_LOGIN: ${{ needs.get-github-info.outputs.user_login }}
          ORIGIN_URL: https://github.com/${{ github.repository }}.git
          ORIGIN_BRANCH: ${{ needs.get-github-info.outputs.origin_branch }}
          TEMPLATE_URL: ${{ needs.get-github-info.outputs.template_url }}
          TEMPLATE_BRANCH: ${{ needs.get-github-info.outputs.template_branch }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
